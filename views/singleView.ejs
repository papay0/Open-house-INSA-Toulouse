<div id ="content" class="fullHeight" />
<script src="js/maps.js"></script>
<script type="text/babel">
  var SearchBox = React.createClass({
    doSearch:function(){
        var query=this.refs.searchInput.value; // this is the search text
        this.props.doSearch(query);
    },
    render:function(){
        return <input type="text" className="form-control titreLeftMenu" ref="searchInput" placeholder="Search Name" value={this.props.query} onChange={this.doSearch}/>
    }
  });

  var LoginButton = React.createClass({
    render:function(){
        return <a className="btn btn-default" type="submit" href="login" style={{position:'fixed', top:'5px', right:'5px'}}>Login</a>
    }
  });

  var AddButton = React.createClass({
    addToPresentations:function(){
      var updPlann = this.props.updatePlanning;
      var addb = this;
      var id = 'add'+this.props.id;
      $('#'+id).attr('class', 'glyphicon glyphicon-refresh');
      $.ajax({
        url : '/suscribePresentation',
        type : 'POST',
        data : 'presentationId='+this.props.id,
        dataType : 'html',
        success : function(code_html, statut){
          $('#'+id).attr('class', 'glyphicon glyphicon-ok');
          var addplanning ={name:addb.props.name,
          id: addb.props.id,
          description: addb.props.description,
          start: addb.props.start,
          end: addb.props.end,
          lat: addb.props.lat,
          long: addb.props.long,
          imgUrl: addb.props.imgUrl,
          planning:true};
          updPlann(addplanning);
          $('#falsebutton'+addb.props.id).attr('class', 'hidden');
        },
        error : function(resultat, statut, erreur){
          $('#'+id).attr("class", "glyphicon glyphicon-remove");
        },
      });
    },
    render:function(){
        var id = 'add'+this.props.id;
        return <div className="col-xs-1"><span id={id} className="glyphicon glyphicon-plus" aria-hidden="true" style={{cursor:'pointer'}} onClick={this.addToPresentations}></span></div>

    }
  });

  var RemoveButton = React.createClass({
    removeToPresentations:function(){
      var rmvPlann = this.props.removeFromPlanning;
      var addButtonObject = this;
      var id = 'add'+this.props.id;
      $('#'+id).attr('class', 'glyphicon glyphicon-refresh');
      $.ajax({
        url : '/removePresentation',
        type : 'POST',
        data : 'presentationId='+this.props.id,
        dataType : 'html',
        success : function(code_html, statut){
          $('#'+id).attr('class', 'glyphicon glyphicon-ok');
          var rmvplanning ={name:addButtonObject.props.name,
          id: addButtonObject.props.id,
          description: addButtonObject.props.description,
          start: addButtonObject.props.start,
          end: addButtonObject.props.end,
          lat: addButtonObject.props.lat,
          long: addButtonObject.props.long,
          imgUrl: addButtonObject.props.imgUrl,
          planning:true};
          rmvPlann(rmvplanning);
          $('#falsebutton'+addButtonObject.props.id).find('span').attr('class', 'glyphicon glyphicon-plus');
          $('#falsebutton'+addButtonObject.props.id).attr('class', 'show');
        },
        error : function(resultat, statut, erreur){
          $('#'+id).attr("class", "glyphicon glyphicon-remove");
        },
      });
    },
    render:function(){
        var id = 'add'+this.props.id;
        return <div className="col-xs-1"><span id={id} className="glyphicon glyphicon-remove" aria-hidden="true" style={{cursor:'pointer'}} onClick={this.removeToPresentations}></span></div>
    }
  });

  var PresentationInfos = React.createClass({
    render:function(){
      var idDivHidden=this.props.planning+this.props.id;
      var button;
      if(this.props.planning){
        button = <RemoveButton id={this.props.id} removeFromPlanning={this.props.removeFromPlanning} start={this.props.start} end={this.props.end} imgUrl={this.props.imgUrl} lat={this.props.lat} long={this.props.long} id={this.props.id} name={this.props.name} description={this.props.description}/>;
      }else{
        <% if(typeof user !== 'undefined'){ %>
          button = <AddButton id={this.props.id} updatePlanning={this.props.updatePlanning} start={this.props.start} end={this.props.end} imgUrl={this.props.imgUrl} lat={this.props.lat} long={this.props.long} id={this.props.id} name={this.props.name} description={this.props.description}/>;
        <%}%>
      }
      var idDivButton = this.props.planning+'button'+this.props.id;
      return (
        <div id={idDivHidden} className="collapse">
          <div className="list-group-item">
            <h4>Horaires : </h4>
            <div className="row">
              <div id={idDivButton}>
                {button}
              </div>
              <div className="col-xs-5">{this.props.start}</div>
              <div className="col-xs-5">{this.props.end}</div>
            </div>
            <h4>Description : </h4>
            <p className="text-justify">{this.props.description}</p>
          </div>
        </div>
      )
    }
  });

  var GotoSection = React.createClass({
    goto:function(){
      setLatitudeDest(this.props.lat);
      setLongitudeDest(this.props.long);
      initMap();
    },
    gotomobile:function(){
      var adrs = "gotopresentation?lat="+this.props.lat+"&long="+this.props.long;
      window.location.replace(adrs);
    },
    render:function(){
      return (
        <div className="col-xs-2" style={{margin:'0',paddingTop:'18px',color:'whitesmoke',cursor:'pointer'}}>
          <span className="glyphicon glyphicon-road hidden-xs" aria-hidden="true" onClick={this.goto}></span>
          <span className="glyphicon glyphicon-road visible-xs" aria-hidden="true" onClick={this.gotomobile}></span>
        </div>
      )
    }
  });

  var PresentationListItem = React.createClass({
    clicked:function(){
      if(($.inArray( this.props.id, idPlanning )!=-1)&& (!this.props.planning)){
        $('#'+this.props.planning+'button'+this.props.id).attr('class', 'hidden');
      }
      $('.collapse').collapse('hide');
      $('#'+this.props.planning+this.props.id).collapse('toggle');
      pinpoint(this.props.lat, this.props.long, this.props.name);
    },
    render:function(){
      var hashId = "#"+this.props.id;
      var divStyle = {
        backgroundImage: 'url(' + this.props.imgUrl + ')',
        backgroundSize: '100%',
        backgroundPosition: '50%',
        color : 'white',
        height: '100px',
      };
      var bg = {
        background: 'rgba(0, 0, 0, 0.55)',
        height : '100%',
        width : '100%',
        paddingTop: '18px'
      }
        return(
          <div>
            <div style={divStyle}>
              <a className="list-group-item" style={bg}>
                <div className="row">
                  <div className="col-xs-10" style={{margin:'-3px',cursor:'pointer'}} onClick={this.clicked}>
                    <h3 style={{color: 'whitesmoke'}}>{this.props.name}</h3>
                  </div>
                  <GotoSection lat={this.props.lat} long={this.props.long} />
                </div>
              </a>
              </div>
              <PresentationInfos planning={this.props.planning} id={this.props.id} removeFromPlanning={this.props.removeFromPlanning} updatePlanning={this.props.updatePlanning} start={this.props.start} end={this.props.end} imgUrl={this.props.imgUrl} lat={this.props.lat} long={this.props.long} id={this.props.id} name={this.props.name} description={this.props.description} />
          </div>
        );
    }
  });

  var DisplayTable = React.createClass({
    render:function(){
        //making the rows to display
        var rows=[];
        var updPlann = this.props.updatePlanning;
        var rmvPlann = this.props.removeFromPlanning;
        this.props.data.forEach(function(presentation) {
          rows.push(<PresentationListItem planning={presentation.planning} removeFromPlanning={rmvPlann} updatePlanning={updPlann} key={presentation.id} start={presentation.start} end={presentation.end} imgUrl={presentation.imgUrl} lat={presentation.lat} long={presentation.long} id={presentation.id} name={presentation.name} description={presentation.description} />)
        });
        //returning the table
        return(
          <div className="list-group" role="tablist" aria-multiselectable="true">
            {rows}
          </div>
        );
    }
  });
  var Map = React.createClass({
    render:function(){
        return(
          <div id="mapContainer" className="fullHeight col-md-9 hidden-xs">
            <div id="map"></div>
          </div>
        );
    }
  });

  var LeftMenu = React.createClass({
    doSearch:function(queryText){
        console.log(queryText)
        //get query result
        var queryResult=[];
        this.props.data.forEach(function(presentation){
            if(presentation.name.toLowerCase().indexOf(queryText.toLowerCase())!=-1)
            queryResult.push(presentation);
        });

        this.setState({
            query:queryText,
            filteredData: queryResult
        })
    },
    updatePlanning:function(planning){
      var planningIn=this.state.planning;
      planningIn.push(planning);
      this.setState({
          planning: planningIn
      })
    },
    removeFromPlanning:function(planning){
      var planningIn=this.state.planning;
      planningIn.pop(planning);
      idPlanning.pop(planning.id);
      this.setState({
          planning: planningIn
      })
    },
    getInitialState:function(){
        return{
            query:'',
            filteredData: this.props.data,
            planning: this.props.planning
        }
    },
    render:function(){
        return (
            <div className="LeftMenu col-md-3 container-fluid">
              <h1 className="centered titreLeftMenu">INSA JPO</h1>
              <SearchBox query={this.state.query} doSearch={this.doSearch}/>
              <% if(typeof planning !== 'undefined'){ %>
              <h3>Presentations sélectionnées</h3>
              <DisplayTable data={this.state.planning} removeFromPlanning={this.removeFromPlanning}/>
              <%}%>
              <h3>Toutes les présentations</h3>
              <DisplayTable data={this.state.filteredData} updatePlanning={this.updatePlanning}/>
            </div>
        );
    }
  });
  var presentations=[
    <% _.each(presentations, function (presentation) { %>
    {
        name:'<%= presentation.get('name') %>',
        id: '<%= presentation.id %>',
        description: '<%= presentation.get('description') %>',
        start: moment(Date.parse("<%= presentation.get('start') %>")).format('HH:mm'),
        end: moment(Date.parse("<%= presentation.get('end') %>")).format('HH:mm'),
        lat: '<%= presentation.get('location').latitude %>',
        long: '<%= presentation.get('location').longitude %>',
        imgUrl: '<%= presentation.get('image').url() %>',
        planning:false
    },
    <% })%>
  ];
  var idPlanning=[
    <% if(typeof planning !== 'undefined'){ %>
      <% _.each(planning, function (presentation) { %>
          '<%= presentation.id %>',
      <% })%>
    <% } %>
  ]
  var planning=[
    <% if(typeof planning !== 'undefined'){ %>
      <% _.each(planning, function (presentation) { %>
      {
          name:'<%= presentation.get('name') %>',
          id: '<%= presentation.id %>',
          description: '<%= presentation.get('description') %>',
          start: moment(Date.parse("<%= presentation.get('start') %>")).format('HH:mm'),
          end: moment(Date.parse("<%= presentation.get('end') %>")).format('HH:mm'),
          lat: '<%= presentation.get('location').latitude %>',
          long: '<%= presentation.get('location').longitude %>',
          imgUrl: '<%= presentation.get('image').url() %>',
          planning:true
      },
      <% })%>
    <% } %>
  ]
ReactDOM.render(
  <div className="row fullHeight">
    <LeftMenu data={presentations} planning={planning} />
    <Map/>
    <LoginButton />
  </div>,
  document.getElementById('content')
);
</script>
<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCirxzx91LVmHxOjOBrcWtE20Ck3ArLynw&callback=initMap">
</script>
